.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_Objeto_3_main_0
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_A_2: DW L_MET_A_2_methodb1_0
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'A' DE LA CLASE 'A'
L_CTOR_A_2_A: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'methodb1' DE LA CLASE 'A'
L_MET_A_2_methodb1_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 2  ; Reservamos memoria para las variables locales del metodo 'methodb1' 
.CODE
RMEM 1  ; NewNode. Llamada al constructor de la clase 'Objeto'. Se reserva memoria para la referencia al nuevo CIR. 
PUSH 1  ; NewNode. Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; NewNode. Apilamos la direccion de la rutina para reservar memoria en el heap. 
CALL  ; NewNode. Invocamos a la rutina en el tope de la pila (lsimple_malloc). 
DUP  ; NewNode. Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_Objeto_3  ; NewNode. Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR. 
STOREREF 0  ; NewNode. Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT. 
DUP  ; NewNode. Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila. 
.CODE
LOAD 3  ; ThisNode. Apilamos THIS. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 1  ; LiteralNode. Apilamos 'true'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 1
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH 97  ; LiteralNode. Apilo el caracter 'a'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.DATA
lString1_methodb1_A: DW "una cadena", 0
.CODE
PUSH lString1_methodb1_A  ; Apilamos el label del String '"una cadena"'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_Objeto_3_Objeto  ; NewNode. Apilamos la direccion del constructor de la clase 'Objeto'. 
CALL  ; NewNode. Invocamos la rutina del constructor de la clase 'Objeto'. 
.CODE
STORE 5  ; AssignNode. El lado izquierdo es un parametro del metodo 'methodb1'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'o2'. 
.CODE
STORE 5  ; AssignNode. El lado izquierdo es un parametro del metodo 'methodb1'. 
FMEM 2  ; Liberamos la memoria de las variables locales del metodo 'methodb1' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.DATA
VT_Objeto_3: DW L_MET_Objeto_3_main_0
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Objeto' DE LA CLASE 'Objeto'
L_CTOR_Objeto_3_Objeto: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 6  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'Objeto'
L_MET_Objeto_3_main_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
