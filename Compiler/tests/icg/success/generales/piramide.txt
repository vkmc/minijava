.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_Piramide_2_main_0
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_Piramide_2: DW L_MET_Piramide_2_main_0
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Piramide' DE LA CLASE 'Piramide'
L_CTOR_Piramide_2_Piramide: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'Piramide'
L_MET_Piramide_2_main_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 3  ; Reservamos memoria para las variables locales del metodo 'main' 
.CODE
PUSH 10
.CODE
STORE -2  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
.CODE
PUSH 1
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
L_COND_FOR_1_main_Piramide: NOP
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'i'. 
.CODE
LOAD -2  ; IdMethodCallNode. Cargamos la variable local 'cantidad'. 
.CODE
LE
BF L_ENDFOR_1_main_Piramide
.CODE
.CODE
PUSH 1
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
L_COND_FOR_2_main_Piramide: NOP
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'j'. 
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'i'. 
.CODE
LE
BF L_ENDFOR_2_main_Piramide
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
PUSH 42  ; LiteralNode. Apilo el caracter '*'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printC
CALL  ; CallNode. Llamada al metodo 'printC' de System. 
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'j'. 
.CODE
PUSH 1
.CODE
ADD
STORE 0  ; ForNode. El lado izquierdo es una variable local del metodo 'main' 
JUMP L_COND_FOR_2_main_Piramide
L_ENDFOR_2_main_Piramide: NOP
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
PUSH L_MET_System_1_println
CALL  ; CallNode. Llamada al metodo 'println' de System. 
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'i'. 
.CODE
PUSH 1
.CODE
ADD
STORE -1  ; ForNode. El lado izquierdo es una variable local del metodo 'main' 
JUMP L_COND_FOR_1_main_Piramide
L_ENDFOR_1_main_Piramide: NOP
FMEM 3  ; Liberamos la memoria de las variables locales del metodo 'main' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
