.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_invertir_numero_2_main_2
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_invertir_numero_2: DW L_MET_invertir_numero_2_contarDigitos_0, L_MET_invertir_numero_2_invertir_1, L_MET_invertir_numero_2_main_2
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'invertir_numero' DE LA CLASE 'invertir_numero'
L_CTOR_invertir_numero_2_invertir_numero: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'contarDigitos' DE LA CLASE 'invertir_numero'
L_MET_invertir_numero_2_contarDigitos_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 1  ; Reservamos memoria para las variables locales del metodo 'contarDigitos' 
.CODE
PUSH 0
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'contarDigitos'. 
.CODE
L_WHILE_1_contarDigitos_invertir_numero: NOP
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'numero'. 
.CODE
PUSH 0
.CODE
GT
BF L_ENDWHILE_1_contarDigitos_invertir_numero
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'numero'. 
.CODE
PUSH 10
.CODE
DIV
.CODE
STORE 4  ; AssignNode. El lado izquierdo es un parametro del metodo 'contarDigitos'. 
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'cuenta'. 
.CODE
PUSH 1
.CODE
ADD
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'contarDigitos'. 
JUMP L_WHILE_1_contarDigitos_invertir_numero
L_ENDWHILE_1_contarDigitos_invertir_numero: NOP
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'cuenta'. 
.CODE
; Retorno de expresion del metodo 'contarDigitos' de la clase 'invertir_numero'.
STORE 5  ; ReturnExpNode. Almacenamos el retorno del metodo 'contarDigitos' de la clase 'invertir_numero'. 
FMEM 1  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'contarDigitos' de la clase 'invertir_numero'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 2  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'contarDigitos' de la clase 'invertir_numero'. 
FMEM 1  ; Liberamos la memoria de las variables locales del metodo 'contarDigitos' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'invertir' DE LA CLASE 'invertir_numero'
L_MET_invertir_numero_2_invertir_1: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 2  ; Reservamos memoria para las variables locales del metodo 'invertir' 
.CODE
PUSH 0
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'invertir'. 
.CODE
.CODE
PUSH 0
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'invertir'. 
L_COND_FOR_2_invertir_invertir_numero: NOP
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'aux'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'digitos'. 
.CODE
LT
BF L_ENDFOR_2_invertir_invertir_numero
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'cuenta'. 
.CODE
PUSH 10
.CODE
MUL
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'numero'. 
.CODE
PUSH 10
.CODE
MOD
.CODE
ADD
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'invertir'. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'numero'. 
.CODE
PUSH 10
.CODE
DIV
.CODE
STORE 5  ; AssignNode. El lado izquierdo es un parametro del metodo 'invertir'. 
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'aux'. 
.CODE
PUSH 1
.CODE
ADD
STORE 0  ; ForNode. El lado izquierdo es una variable local del metodo 'invertir' 
JUMP L_COND_FOR_2_invertir_invertir_numero
L_ENDFOR_2_invertir_invertir_numero: NOP
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'cuenta'. 
.CODE
; Retorno de expresion del metodo 'invertir' de la clase 'invertir_numero'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'invertir' de la clase 'invertir_numero'. 
FMEM 2  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'invertir' de la clase 'invertir_numero'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'invertir' de la clase 'invertir_numero'. 
FMEM 2  ; Liberamos la memoria de las variables locales del metodo 'invertir' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'invertir_numero'
L_MET_invertir_numero_2_main_2: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locaci贸n donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 3  ; Reservamos memoria para las variables locales del metodo 'main' 
.CODE
PUSH 1123581321
.CODE
STORE -2  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'contarDigitos'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'contarDigitos' de la clase 'invertir_numero'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD -2  ; IdMethodCallNode. Cargamos la variable local 'numero'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_invertir_numero_2
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'contarDigitos'. 
CALL  ; MethodCallNode. Llamamos al metodo 'contarDigitos'. 
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'invertir'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'invertir' de la clase 'invertir_numero'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD -2  ; IdMethodCallNode. Cargamos la variable local 'numero'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'digitos'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_invertir_numero_2
LOADREF 1  ; MethodCallNode. Recuperamos la direccion del metodo 'invertir'. 
CALL  ; MethodCallNode. Llamamos al metodo 'invertir'. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'invertir'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'invertir' de la clase 'invertir_numero'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD -2  ; IdMethodCallNode. Cargamos la variable local 'numero'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'digitos'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_invertir_numero_2
LOADREF 1  ; MethodCallNode. Recuperamos la direccion del metodo 'invertir'. 
CALL  ; MethodCallNode. Llamamos al metodo 'invertir'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'invertido'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printIln
CALL  ; CallNode. Llamada al metodo 'printIln' de System. 
FMEM 3  ; Liberamos la memoria de las variables locales del metodo 'main' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
