.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_A_2_main_1
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_A_2: DW L_MET_A_2_mayor_0, L_MET_A_2_main_1
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'A' DE LA CLASE 'A'
L_CTOR_A_2_A: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'mayor' DE LA CLASE 'A'
L_MET_A_2_mayor_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'v1'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'v2'. 
.CODE
GT
.CODE
BF L_ENDIF_1_mayor_A
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'v1'. 
.CODE
; Retorno de expresion del metodo 'mayor' de la clase 'A'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'mayor' de la clase 'A'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'mayor' de la clase 'A'. 
JUMP L_ENDELSE_1_mayor_A
L_ENDIF_1_mayor_A: NOP
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'v2'. 
.CODE
; Retorno de expresion del metodo 'mayor' de la clase 'A'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'mayor' de la clase 'A'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'mayor' de la clase 'A'. 
L_ENDELSE_1_mayor_A: NOP
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'A'
L_MET_A_2_main_1: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 2  ; Reservamos memoria para las variables locales del metodo 'main' 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.DATA
lString2_main_A: DW "Ingrese un num:", 0
.CODE
PUSH lString2_main_A  ; Apilamos el label del String '"Ingrese un num:"'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printSln
CALL  ; CallNode. Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'read' de la clase 'A'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH L_MET_System_1_read
CALL  ; CallNode. Llamada al metodo 'read' de System. 
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'read' de la clase 'A'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH L_MET_System_1_read
CALL  ; CallNode. Llamada al metodo 'read' de System. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.DATA
lString3_main_A: DW "Ingrese otro num:", 0
.CODE
PUSH lString3_main_A  ; Apilamos el label del String '"Ingrese otro num:"'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printSln
CALL  ; CallNode. Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'read' de la clase 'A'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH L_MET_System_1_read
CALL  ; CallNode. Llamada al metodo 'read' de System. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'read' de la clase 'A'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH L_MET_System_1_read
CALL  ; CallNode. Llamada al metodo 'read' de System. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.DATA
lString4_main_A: DW "El mayor numero es: ", 0
.CODE
PUSH lString4_main_A  ; Apilamos el label del String '"El mayor numero es: "'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printSln
CALL  ; CallNode. Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'mayor'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'mayor' de la clase 'A'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'a'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'b'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_A_2
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'mayor'. 
CALL  ; MethodCallNode. Llamamos al metodo 'mayor'. 
.CODE
PUSH 48
.CODE
SUB
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printIln
CALL  ; CallNode. Llamada al metodo 'printIln' de System. 
FMEM 2  ; Liberamos la memoria de las variables locales del metodo 'main' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
