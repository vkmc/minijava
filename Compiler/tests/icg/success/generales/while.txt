.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_A_2_main_1
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_A_2: DW L_MET_A_2_met1_0, L_MET_A_2_main_1
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'A' DE LA CLASE 'A'
L_CTOR_A_2_A: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'met1' DE LA CLASE 'A'
L_MET_A_2_met1_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
PUSH 10
.CODE
GT
.CODE
BF L_ENDIF_1_met1_A
.CODE
L_WHILE_2_met1_A: NOP
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
PUSH 10
.CODE
GT
BF L_ENDWHILE_2_met1_A
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
PUSH 1
.CODE
SUB
.CODE
STORE 4  ; AssignNode. El lado izquierdo es un parametro del metodo 'met1'. 
JUMP L_WHILE_2_met1_A
L_ENDWHILE_2_met1_A: NOP
JUMP L_ENDELSE_1_met1_A
L_ENDIF_1_met1_A: NOP
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
PUSH 10
.CODE
LT
.CODE
BF L_ENDIFTHEN_3_met1_A
.CODE
L_WHILE_4_met1_A: NOP
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
PUSH 10
.CODE
LT
BF L_ENDWHILE_4_met1_A
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
PUSH 1
.CODE
ADD
.CODE
STORE 4  ; AssignNode. El lado izquierdo es un parametro del metodo 'met1'. 
JUMP L_WHILE_4_met1_A
L_ENDWHILE_4_met1_A: NOP
L_ENDIFTHEN_3_met1_A: NOP
L_ENDELSE_1_met1_A: NOP
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
; Retorno de expresion del metodo 'met1' de la clase 'A'.
STORE 5  ; ReturnExpNode. Almacenamos el retorno del metodo 'met1' de la clase 'A'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 2  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'met1' de la clase 'A'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'A'
L_MET_A_2_main_1: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 1  ; Reservamos memoria para las variables locales del metodo 'main' 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.DATA
lString5_main_A: DW "* if true: Met1: ", 0
.CODE
PUSH lString5_main_A  ; Apilamos el label del String '"* if true: Met1: "'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printS
CALL  ; CallNode. Llamada al metodo 'printS' de System. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'met1'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'met1' de la clase 'A'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH 15
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_A_2
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'met1'. 
CALL  ; MethodCallNode. Llamamos al metodo 'met1'. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'a'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printIln
CALL  ; CallNode. Llamada al metodo 'printIln' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.DATA
lString6_main_A: DW "* else true: Met1: ", 0
.CODE
PUSH lString6_main_A  ; Apilamos el label del String '"* else true: Met1: "'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printS
CALL  ; CallNode. Llamada al metodo 'printS' de System. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'met1'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'met1' de la clase 'A'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH 5
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_A_2
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'met1'. 
CALL  ; MethodCallNode. Llamamos al metodo 'met1'. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'a'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printIln
CALL  ; CallNode. Llamada al metodo 'printIln' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.DATA
lString7_main_A: DW "* if-else false: Met1: ", 0
.CODE
PUSH lString7_main_A  ; Apilamos el label del String '"* if-else false: Met1: "'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printS
CALL  ; CallNode. Llamada al metodo 'printS' de System. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'met1'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'met1' de la clase 'A'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH 10
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_A_2
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'met1'. 
CALL  ; MethodCallNode. Llamamos al metodo 'met1'. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'a'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printIln
CALL  ; CallNode. Llamada al metodo 'printIln' de System. 
FMEM 1  ; Liberamos la memoria de las variables locales del metodo 'main' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
