.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_Main_3_main_8
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_Math_2: DW L_MET_Math_2_create_0, L_MET_Math_2_get_1, L_MET_Math_2_succ_2, L_MET_Math_2_mul_3, L_MET_Math_2_add_4, L_MET_Math_2_pow_5, L_MET_Math_2_sub_6, L_MET_Math_2_div_7
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Math' DE LA CLASE 'Math'
L_CTOR_Math_2_Math: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 8  ; IdMethodCallNode. Cargamos el parametro 'a'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 5  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Math'. 
.CODE
LOAD 7  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 4  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Math'. 
.CODE
LOAD 6  ; IdMethodCallNode. Cargamos el parametro 'c'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 3  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Math'. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'd'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 2  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Math'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'e'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 1  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Math'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 6  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'create' DE LA CLASE 'Math'
L_MET_Math_2_create_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; NewNode. Llamada al constructor de la clase 'Math'. Se reserva memoria para la referencia al nuevo CIR. 
PUSH 6  ; NewNode. Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; NewNode. Apilamos la direccion de la rutina para reservar memoria en el heap. 
CALL  ; NewNode. Invocamos a la rutina en el tope de la pila (lsimple_malloc). 
DUP  ; NewNode. Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_Math_2  ; NewNode. Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR. 
STOREREF 0  ; NewNode. Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT. 
DUP  ; NewNode. Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila. 
.CODE
LOAD 8  ; IdMethodCallNode. Cargamos el parametro 'a'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 7  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 6  ; IdMethodCallNode. Cargamos el parametro 'c'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'd'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'e'. 
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_Math_2_Math  ; NewNode. Apilamos la direccion del constructor de la clase 'Math'. 
CALL  ; NewNode. Invocamos la rutina del constructor de la clase 'Math'. 
.CODE
; Retorno de expresion del metodo 'create' de la clase 'Math'.
STORE 9  ; ReturnExpNode. Almacenamos el retorno del metodo 'create' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 6  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'create' de la clase 'Math'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 6  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'get' DE LA CLASE 'Math'
L_MET_Math_2_get_1: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'div'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'div' de la clase 'Math'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'add' de la clase 'Math'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'mul'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'mul' de la clase 'Math'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 5  ; IdMethodCallNode. Cargamos la variable de instancia '_a'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 4  ; IdMethodCallNode. Cargamos la variable de instancia '_b'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Math_2
LOADREF 3  ; MethodCallNode. Recuperamos la direccion del metodo 'mul'. 
CALL  ; MethodCallNode. Llamamos al metodo 'mul'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'pow' de la clase 'Math'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 3  ; IdMethodCallNode. Cargamos la variable de instancia '_c'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 2  ; IdMethodCallNode. Cargamos la variable de instancia '_d'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH VT_Math_2
LOADREF 5  ; CallNode. Recuperamos la direccion del metodo 'pow'. 
CALL  ; CallNode. Llamamos al metodo 'pow'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH VT_Math_2
LOADREF 4  ; CallNode. Recuperamos la direccion del metodo 'add'. 
CALL  ; CallNode. Llamamos al metodo 'add'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 1  ; IdMethodCallNode. Cargamos la variable de instancia '_e'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Math_2
LOADREF 7  ; MethodCallNode. Recuperamos la direccion del metodo 'div'. 
CALL  ; MethodCallNode. Llamamos al metodo 'div'. 
.CODE
; Retorno de expresion del metodo 'get' de la clase 'Math'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'get' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'get' de la clase 'Math'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'succ' DE LA CLASE 'Math'
L_MET_Math_2_succ_2: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'a'. 
.CODE
PUSH 1
.CODE
ADD
.CODE
; Retorno de expresion del metodo 'succ' de la clase 'Math'.
STORE 5  ; ReturnExpNode. Almacenamos el retorno del metodo 'succ' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 2  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'succ' de la clase 'Math'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'mul' DE LA CLASE 'Math'
L_MET_Math_2_mul_3: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
PUSH 0
.CODE
EQ
.CODE
BF L_ENDIF_1_mul_Math
.CODE
PUSH 0
.CODE
; Retorno de expresion del metodo 'mul' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'mul' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'mul' de la clase 'Math'. 
JUMP L_ENDELSE_1_mul_Math
L_ENDIF_1_mul_Math: NOP
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'add'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'add' de la clase 'Math'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'mul'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'mul' de la clase 'Math'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
PUSH 1
.CODE
SUB
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Math_2
LOADREF 3  ; MethodCallNode. Recuperamos la direccion del metodo 'mul'. 
CALL  ; MethodCallNode. Llamamos al metodo 'mul'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Math_2
LOADREF 4  ; MethodCallNode. Recuperamos la direccion del metodo 'add'. 
CALL  ; MethodCallNode. Llamamos al metodo 'add'. 
.CODE
; Retorno de expresion del metodo 'mul' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'mul' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'mul' de la clase 'Math'. 
L_ENDELSE_1_mul_Math: NOP
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'add' DE LA CLASE 'Math'
L_MET_Math_2_add_4: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
PUSH 0
.CODE
EQ
.CODE
BF L_ENDIF_2_add_Math
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
.CODE
; Retorno de expresion del metodo 'add' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'add' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'add' de la clase 'Math'. 
JUMP L_ENDELSE_2_add_Math
L_ENDIF_2_add_Math: NOP
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'succ'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'succ' de la clase 'Math'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'add'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'add' de la clase 'Math'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
PUSH 1
.CODE
SUB
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Math_2
LOADREF 4  ; MethodCallNode. Recuperamos la direccion del metodo 'add'. 
CALL  ; MethodCallNode. Llamamos al metodo 'add'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Math_2
LOADREF 2  ; MethodCallNode. Recuperamos la direccion del metodo 'succ'. 
CALL  ; MethodCallNode. Llamamos al metodo 'succ'. 
.CODE
; Retorno de expresion del metodo 'add' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'add' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'add' de la clase 'Math'. 
L_ENDELSE_2_add_Math: NOP
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'pow' DE LA CLASE 'Math'
L_MET_Math_2_pow_5: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
PUSH 0
.CODE
EQ
.CODE
BF L_ENDIF_3_pow_Math
.CODE
PUSH 1
.CODE
; Retorno de expresion del metodo 'pow' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'pow' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'pow' de la clase 'Math'. 
JUMP L_ENDELSE_3_pow_Math
L_ENDIF_3_pow_Math: NOP
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'pow'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'pow' de la clase 'Math'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
PUSH 1
.CODE
SUB
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Math_2
LOADREF 5  ; MethodCallNode. Recuperamos la direccion del metodo 'pow'. 
CALL  ; MethodCallNode. Llamamos al metodo 'pow'. 
.CODE
MUL
.CODE
; Retorno de expresion del metodo 'pow' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'pow' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'pow' de la clase 'Math'. 
L_ENDELSE_3_pow_Math: NOP
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'sub' DE LA CLASE 'Math'
L_MET_Math_2_sub_6: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
SUB
.CODE
; Retorno de expresion del metodo 'sub' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'sub' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'sub' de la clase 'Math'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'div' DE LA CLASE 'Math'
L_MET_Math_2_div_7: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'a'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'b'. 
.CODE
DIV
.CODE
; Retorno de expresion del metodo 'div' de la clase 'Math'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'div' de la clase 'Math'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'div' de la clase 'Math'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.DATA
VT_Main_3: DW L_MET_Math_2_create_0, L_MET_Math_2_get_1, L_MET_Math_2_succ_2, L_MET_Math_2_mul_3, L_MET_Math_2_add_4, L_MET_Math_2_pow_5, L_MET_Math_2_sub_6, L_MET_Math_2_div_7, L_MET_Main_3_main_8
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Main' DE LA CLASE 'Main'
L_CTOR_Main_3_Main: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'Main'
L_MET_Main_3_main_8: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.DATA
lString4_main_Main: DW "(7 * 5 + 5 ^ 2)/6 = ", 0
.CODE
PUSH lString4_main_Main  ; Apilamos el label del String '"(7 * 5 + 5 ^ 2)/6 = "'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printS
CALL  ; CallNode. Llamada al metodo 'printS' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'create' de la clase 'Main'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
PUSH 7
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 5
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 5
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 2
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 6
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH VT_Math_2
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'create'. 
CALL  ; CallNode. Llamamos al metodo 'create'. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'get' de la clase 'Main'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'get'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 1  ; CallNode. Recuperamos la direccion del metodo 'get'. 
CALL  ; CallNode. Llamamos al metodo 'get'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printIln
CALL  ; CallNode. Llamada al metodo 'printIln' de System. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
