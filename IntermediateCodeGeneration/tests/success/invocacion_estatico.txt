.DATA
VT_Object: NOP
VT_System: DW L_MET_System_Ctor, L_MET_System_read, L_MET_System_printI, L_MET_System_printC, L_MET_System_printB, L_MET_System_printS, L_MET_System_println, L_MET_System_printBln, L_MET_System_printCln, L_MET_System_printIln, L_MET_System_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP  ; Inicializamos el heap 
CALL
RMEM 1  ; Reservamos memoria para el this 
PUSH L_B_main  ; Apilamos el label del main de la Clase Principal del Programa 
CALL
HALT
L_MET_System_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: LOADFP  ; Inicializacion unidad 
LOADSP
STOREFP  ; Finaliza inicializacion del RA 
LOADHL  ; hl 
DUP  ; hl 
PUSH 1  ; 1 
ADD  ; hl+1 
STORE 4  ; Guarda resultado (puntero a la base del bloque) 
LOAD 3  ; Carga cantidad de celdas a alojar (parametro)  
ADD
STOREHL  ; Mueve el heap limit (hl) 
STOREFP
RET 1  ; Retorna eliminando el parametro 
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_A: DW L_MET_A_getLimit
.CODE
; Inicializacion CI del servicio 'A' de clase 'A'
L_MET_A_A: LOADFP  ; Se guarda el enlace dinamico al RA llamador 
LOADSP  ; Se apila el lugar a donde comienza el RA de la unidad 
STOREFP  ; Se actualiza el FP con el valor del tope de la pila 
STOREFP ; actualizar el FP para que apunte al RA del llamador
RET 1
.CODE
; Inicializacion CI del servicio 'getLimit' de clase 'A'
L_MET_A_getLimit: LOADFP  ; Se guarda el enlace dinamico al RA llamador 
LOADSP  ; Se apila el lugar a donde comienza el RA de la unidad 
STOREFP  ; Se actualiza el FP con el valor del tope de la pila 
.CODE
PUSH 10
.CODE
; Retorno de expresion del metodo 'getLimit' de la clase 'A'
STORE 4  ; Almacenamos el retorno del metodo 'getLimit' de la clase 'A'. 
STOREFP  ; Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getLimit' de la clase 'A'. 
STOREFP ; actualizar el FP para que apunte al RA del llamador
RET 1
.DATA
VT_B: DW L_MET_B_main, L_MET_B_printLimit
.CODE
; Inicializacion CI del servicio 'B' de clase 'B'
L_MET_B_B: LOADFP  ; Se guarda el enlace dinamico al RA llamador 
LOADSP  ; Se apila el lugar a donde comienza el RA de la unidad 
STOREFP  ; Se actualiza el FP con el valor del tope de la pila 
STOREFP ; actualizar el FP para que apunte al RA del llamador
RET 1
.CODE
; Inicializacion CI del servicio 'main' de clase 'B'
L_MET_B_main: LOADFP  ; Se guarda el enlace dinamico al RA llamador 
LOADSP  ; Se apila el lugar a donde comienza el RA de la unidad 
STOREFP  ; Se actualiza el FP con el valor del tope de la pila 
RMEM 1  ; Reservamos espacio para las variables locales del metodo 'main' 
.CODE
RMEM 1  ; Llamada al constructor de la clase 'B'. Se reserva memoria para la referencia al nuevo CIR 
PUSH 1  ; Se apila la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; Se apila la direccion de la rutina para reservar memoria en el heap 
CALL  ; Se invoca a la rutina en el tope de la pila (lsimple_malloc) 
DUP  ; Se duplica la referencia al nuevo CIR para el STOREREF. 
PUSH VT_B  ; Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR 
STOREREF 0  ; Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT 
DUP  ; Se duplica el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila 
.CODE
PUSH L_MET_B_B  ; Se apila la direccion del constructor de la clase 'B'. 
CALL  ; Se invoca a la rutina del constructor de la clase 'B' 
.CODE
STORE 0  ; Asignacion. El lado izquierdo es una variable local del metodo 'main' 
.CODE
LOAD 0  ; Cargamos la variable local 'objetoB'. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el resultado del metodo 'main' de la clase 'B' 
SWAP  ; Acomodamos el THIS haciendo un SWAP con RETVAL 
.CODE
DUP  ; Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'printLimit'. 
LOADREF 0  ; El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 1  ; Recuperamos la direccion del metodo 'printLimit'. 
CALL  ; Llamamos al metodo 'printLimit'. 
POP  ; Desapilamos el resultado de la expresion 
FMEM 1  ; Liberamos espacio para las variables locales del metodo 'main' 
STOREFP ; actualizar el FP para que apunte al RA del llamador
RET 1
.CODE
; Inicializacion CI del servicio 'printLimit' de clase 'B'
L_MET_B_printLimit: LOADFP  ; Se guarda el enlace dinamico al RA llamador 
LOADSP  ; Se apila el lugar a donde comienza el RA de la unidad 
STOREFP  ; Se actualiza el FP con el valor del tope de la pila 
RMEM 1  ; Reservamos espacio para las variables locales del metodo 'printLimit' 
.CODE
PUSH VT_A
.CODE
STORE 0  ; Asignacion. El lado izquierdo es una variable local del metodo 'printLimit' 
.CODE
LOAD 0  ; Cargamos la variable local 'limit'. 
.CODE
PUSH 10
.CODE
EQ
.CODE
BF L_ENDIF_1_printLimit_B
.CODE
PUSH VT_System
JUMP L_ENDELSE_1_printLimit_B
L_ENDIF_1_printLimit_B: NOP
.CODE
PUSH VT_System
L_ENDELSE_1_printLimit_B: NOP
FMEM 1  ; Liberamos espacio para las variables locales del metodo 'printLimit' 
STOREFP ; actualizar el FP para que apunte al RA del llamador
RET 1
