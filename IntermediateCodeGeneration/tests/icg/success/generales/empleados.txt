.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_Main_5_main_0
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_Empleado_2: DW L_MET_Empleado_2_setBase_0, L_MET_Empleado_2_getBase_1, L_MET_Empleado_2_getSueldo_2, L_MET_Empleado_2_getNombre_3
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Empleado' DE LA CLASE 'Empleado'
L_CTOR_Empleado_2_Empleado: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'setBase'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'base'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'setBase'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'setBase'. 
CALL  ; MethodCallNode. Llamamos al metodo 'setBase'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'setBase' DE LA CLASE 'Empleado'
L_MET_Empleado_2_setBase_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'base'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 1  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Empleado'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getBase' DE LA CLASE 'Empleado'
L_MET_Empleado_2_getBase_1: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 1  ; IdMethodCallNode. Cargamos la variable de instancia 'b'. 
.CODE
; Retorno de expresion del metodo 'getBase' de la clase 'Empleado'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getBase' de la clase 'Empleado'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getBase' de la clase 'Empleado'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getSueldo' DE LA CLASE 'Empleado'
L_MET_Empleado_2_getSueldo_2: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 1  ; IdMethodCallNode. Cargamos la variable de instancia 'b'. 
.CODE
; Retorno de expresion del metodo 'getSueldo' de la clase 'Empleado'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getSueldo' de la clase 'Empleado'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getSueldo' de la clase 'Empleado'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getNombre' DE LA CLASE 'Empleado'
L_MET_Empleado_2_getNombre_3: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.DATA
lString1_getNombre_Empleado: DW "Empleado", 0
.CODE
PUSH lString1_getNombre_Empleado  ; Apilamos el label del String '"Empleado"'. 
.CODE
; Retorno de expresion del metodo 'getNombre' de la clase 'Empleado'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getNombre' de la clase 'Empleado'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getNombre' de la clase 'Empleado'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.DATA
VT_EmpleadoPorComision_3: DW L_MET_Empleado_2_setBase_0, L_MET_Empleado_2_getBase_1, L_MET_EmpleadoPorComision_3_getSueldo_2, L_MET_EmpleadoPorComision_3_getNombre_3, L_MET_EmpleadoPorComision_3_setVentas_4, L_MET_EmpleadoPorComision_3_setComision_5, L_MET_EmpleadoPorComision_3_getVentas_6, L_MET_EmpleadoPorComision_3_getComision_7
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'EmpleadoPorComision' DE LA CLASE 'EmpleadoPorComision'
L_CTOR_EmpleadoPorComision_3_EmpleadoPorComision: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'setBase'. 
.CODE
PUSH 0
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'setBase'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'setBase'. 
CALL  ; MethodCallNode. Llamamos al metodo 'setBase'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'setVentas'. 
.CODE
PUSH 0
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'setVentas'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 4  ; MethodCallNode. Recuperamos la direccion del metodo 'setVentas'. 
CALL  ; MethodCallNode. Llamamos al metodo 'setVentas'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'setComision'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'comision'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'setComision'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 5  ; MethodCallNode. Recuperamos la direccion del metodo 'setComision'. 
CALL  ; MethodCallNode. Llamamos al metodo 'setComision'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'setVentas' DE LA CLASE 'EmpleadoPorComision'
L_MET_EmpleadoPorComision_3_setVentas_4: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'ventas'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 3  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'EmpleadoPorComision'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'setComision' DE LA CLASE 'EmpleadoPorComision'
L_MET_EmpleadoPorComision_3_setComision_5: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'comision'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 2  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'EmpleadoPorComision'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getVentas' DE LA CLASE 'EmpleadoPorComision'
L_MET_EmpleadoPorComision_3_getVentas_6: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 3  ; IdMethodCallNode. Cargamos la variable de instancia 'v'. 
.CODE
; Retorno de expresion del metodo 'getVentas' de la clase 'EmpleadoPorComision'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getVentas' de la clase 'EmpleadoPorComision'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getVentas' de la clase 'EmpleadoPorComision'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getComision' DE LA CLASE 'EmpleadoPorComision'
L_MET_EmpleadoPorComision_3_getComision_7: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 2  ; IdMethodCallNode. Cargamos la variable de instancia 'c'. 
.CODE
; Retorno de expresion del metodo 'getComision' de la clase 'EmpleadoPorComision'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getComision' de la clase 'EmpleadoPorComision'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getComision' de la clase 'EmpleadoPorComision'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getSueldo' DE LA CLASE 'EmpleadoPorComision'
L_MET_EmpleadoPorComision_3_getSueldo_2: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 3  ; Reservamos memoria para las variables locales del metodo 'getSueldo' 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'getBase'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'getBase' de la clase 'EmpleadoPorComision'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'getBase'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 1  ; MethodCallNode. Recuperamos la direccion del metodo 'getBase'. 
CALL  ; MethodCallNode. Llamamos al metodo 'getBase'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'getVentas'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'getVentas' de la clase 'EmpleadoPorComision'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'getVentas'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 6  ; MethodCallNode. Recuperamos la direccion del metodo 'getVentas'. 
CALL  ; MethodCallNode. Llamamos al metodo 'getVentas'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'getComision'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'getComision' de la clase 'EmpleadoPorComision'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'getComision'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 7  ; MethodCallNode. Recuperamos la direccion del metodo 'getComision'. 
CALL  ; MethodCallNode. Llamamos al metodo 'getComision'. 
.CODE
MUL
.CODE
ADD
.CODE
; Retorno de expresion del metodo 'getSueldo' de la clase 'EmpleadoPorComision'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getSueldo' de la clase 'EmpleadoPorComision'. 
FMEM 3  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'getSueldo' de la clase 'EmpleadoPorComision'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getSueldo' de la clase 'EmpleadoPorComision'. 
FMEM 3  ; Liberamos la memoria de las variables locales del metodo 'getSueldo' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getNombre' DE LA CLASE 'EmpleadoPorComision'
L_MET_EmpleadoPorComision_3_getNombre_3: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.DATA
lString2_getNombre_EmpleadoPorComision: DW "EmpleadoPorComision", 0
.CODE
PUSH lString2_getNombre_EmpleadoPorComision  ; Apilamos el label del String '"EmpleadoPorComision"'. 
.CODE
; Retorno de expresion del metodo 'getNombre' de la clase 'EmpleadoPorComision'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getNombre' de la clase 'EmpleadoPorComision'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getNombre' de la clase 'EmpleadoPorComision'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.DATA
VT_EmpleadoPorComisionConBase_4: DW L_MET_Empleado_2_setBase_0, L_MET_Empleado_2_getBase_1, L_MET_EmpleadoPorComision_3_getSueldo_2, L_MET_EmpleadoPorComisionConBase_4_getNombre_3, L_MET_EmpleadoPorComision_3_setVentas_4, L_MET_EmpleadoPorComision_3_setComision_5, L_MET_EmpleadoPorComision_3_getVentas_6, L_MET_EmpleadoPorComision_3_getComision_7
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'EmpleadoPorComisionConBase' DE LA CLASE 'EmpleadoPorComisionConBase'
L_CTOR_EmpleadoPorComisionConBase_4_EmpleadoPorComisionConBase: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'setBase'. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'base'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'setBase'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; MethodCallNode. Recuperamos la direccion del metodo 'setBase'. 
CALL  ; MethodCallNode. Llamamos al metodo 'setBase'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'setVentas'. 
.CODE
PUSH 0
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'setVentas'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 4  ; MethodCallNode. Recuperamos la direccion del metodo 'setVentas'. 
CALL  ; MethodCallNode. Llamamos al metodo 'setVentas'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'setComision'. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'comision'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
DUP  ; MethodCallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'setComision'. 
LOADREF 0  ; MethodCallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 5  ; MethodCallNode. Recuperamos la direccion del metodo 'setComision'. 
CALL  ; MethodCallNode. Llamamos al metodo 'setComision'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'getNombre' DE LA CLASE 'EmpleadoPorComisionConBase'
L_MET_EmpleadoPorComisionConBase_4_getNombre_3: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.DATA
lString3_getNombre_EmpleadoPorComisionConBase: DW "EmpleadoPorComisionConBase", 0
.CODE
PUSH lString3_getNombre_EmpleadoPorComisionConBase  ; Apilamos el label del String '"EmpleadoPorComisionConBase"'. 
.CODE
; Retorno de expresion del metodo 'getNombre' de la clase 'EmpleadoPorComisionConBase'.
STORE 4  ; ReturnExpNode. Almacenamos el retorno del metodo 'getNombre' de la clase 'EmpleadoPorComisionConBase'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'getNombre' de la clase 'EmpleadoPorComisionConBase'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.DATA
VT_Main_5: DW L_MET_Main_5_main_0
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Main' DE LA CLASE 'Main'
L_CTOR_Main_5_Main: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'Main'
L_MET_Main_5_main_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 3  ; Reservamos memoria para las variables locales del metodo 'main' 
.CODE
RMEM 1  ; NewNode. Llamada al constructor de la clase 'Empleado'. Se reserva memoria para la referencia al nuevo CIR. 
PUSH 2  ; NewNode. Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; NewNode. Apilamos la direccion de la rutina para reservar memoria en el heap. 
CALL  ; NewNode. Invocamos a la rutina en el tope de la pila (lsimple_malloc). 
DUP  ; NewNode. Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_Empleado_2  ; NewNode. Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR. 
STOREREF 0  ; NewNode. Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT. 
DUP  ; NewNode. Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila. 
.CODE
PUSH 1000
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_Empleado_2_Empleado  ; NewNode. Apilamos la direccion del constructor de la clase 'Empleado'. 
CALL  ; NewNode. Invocamos la rutina del constructor de la clase 'Empleado'. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'e'. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'getNombre' de la clase 'Main'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'getNombre'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 3  ; CallNode. Recuperamos la direccion del metodo 'getNombre'. 
CALL  ; CallNode. Llamamos al metodo 'getNombre'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printS
CALL  ; CallNode. Llamada al metodo 'printS' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
PUSH 32  ; LiteralNode. Apilo el caracter ' '. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printC
CALL  ; CallNode. Llamada al metodo 'printC' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
PUSH 32  ; LiteralNode. Apilo el caracter ' '. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printC
CALL  ; CallNode. Llamada al metodo 'printC' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
PUSH 32  ; LiteralNode. Apilo el caracter ' '. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printC
CALL  ; CallNode. Llamada al metodo 'printC' de System. 
.CODE
RMEM 1  ; IdMethodCallNode. Reservamos una locacion de memoria para el this ficticio. 
.CODE
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'e'. 
.CODE
RMEM 1  ; CallNode. Reservamos una locacion de memoria para el resultado del metodo 'getSueldo' de la clase 'Main'. 
SWAP  ; CallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'getSueldo'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 2  ; CallNode. Recuperamos la direccion del metodo 'getSueldo'. 
CALL  ; CallNode. Llamamos al metodo 'getSueldo'. 
SWAP  ; CallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_1_printIln
CALL  ; CallNode. Llamada al metodo 'printIln' de System. 
.CODE
RMEM 1  ; NewNode. Llamada al constructor de la clase 'EmpleadoPorComision'. Se reserva memoria para la referencia al nuevo CIR. 
PUSH 4  ; NewNode. Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; NewNode. Apilamos la direccion de la rutina para reservar memoria en el heap. 
CALL  ; NewNode. Invocamos a la rutina en el tope de la pila (lsimple_malloc). 
DUP  ; NewNode. Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_EmpleadoPorComision_3  ; NewNode. Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR. 
STOREREF 0  ; NewNode. Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT. 
DUP  ; NewNode. Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila. 
.CODE
PUSH 250
.CODE
SWAP  ; NewNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_EmpleadoPorComision_3_EmpleadoPorComision  ; NewNode. Apilamos la direccion del constructor de la clase 'EmpleadoPorComision'. 
CALL  ; NewNode. Invocamos la rutina del constructor de la clase 'EmpleadoPorComision'. 
.CODE
STORE -2  ; AssignNode. El lado izquierdo es una variable local del metodo 'main'. 
FMEM 3  ; Liberamos la memoria de las variables locales del metodo 'main' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
