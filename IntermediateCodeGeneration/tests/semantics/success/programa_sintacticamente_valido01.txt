.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_Clase_2_main_0
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_Clase_2: DW L_MET_Clase_2_main_0, L_MET_Clase_2_exec_1, L_MET_Clase_2_potencia_2
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Clase' DE LA CLASE 'Clase'
L_CTOR_Clase_2_Clase: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 2  ; Reservamos memoria para las variables locales del metodo 'Clase' 
.CODE
PUSH 3
.CODE
PUSH 4
.CODE
MUL
.CODE
.CODE
PUSH 2
.CODE
PUSH 6
.CODE
MUL
.CODE
.CODE
GE
.CODE
PUSH 3
.CODE
PUSH 8
.CODE
NE
.CODE
.CODE
PUSH 7
.CODE
PUSH 10
.CODE
LE
.CODE
.CODE
AND
.CODE
OR
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 1  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Clase'. 
PUSH 49  ; LiteralNode. Apilo el caracter '1'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 3  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Clase'. 
PUSH 92  ; LiteralNode. Apilo el caracter '\2'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 2  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Clase'. 
.CODE
PUSH 11
.CODE
PUSH 23
.CODE
MUL
.CODE
PUSH 58
.CODE
PUSH 13
.CODE
DIV
.CODE
.CODE
PUSH 21
.CODE
MOD
.CODE
ADD
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 6  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Clase'. 
.CODE
PUSH 4
.CODE
PUSH 8
.CODE
DIV
.CODE
PUSH 15
.CODE
PUSH 16
.CODE
.CODE
PUSH 23
.CODE
DIV
.CODE
.CODE
.CODE
MUL
.CODE
PUSH 42
.CODE
MUL
.CODE
.CODE
ADD
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 5  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Clase'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'potencia'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'potencia' de la clase 'Clase'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 6  ; IdMethodCallNode. Cargamos la variable de instancia 'i1'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 5  ; IdMethodCallNode. Cargamos la variable de instancia 'i2'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Clase_2
LOADREF 2  ; MethodCallNode. Recuperamos la direccion del metodo 'potencia'. 
CALL  ; MethodCallNode. Llamamos al metodo 'potencia'. 
.CODE
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 4  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Clase'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'potencia'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'potencia' de la clase 'Clase'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 6  ; IdMethodCallNode. Cargamos la variable de instancia 'i1'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 2
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Clase_2
LOADREF 2  ; MethodCallNode. Recuperamos la direccion del metodo 'potencia'. 
CALL  ; MethodCallNode. Llamamos al metodo 'potencia'. 
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'Clase'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'potencia'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'potencia' de la clase 'Clase'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 3  ; IdMethodCallNode. Apilamos el THIS para poder acceder al CIR. 
LOADREF 5  ; IdMethodCallNode. Cargamos la variable de instancia 'i2'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH 4
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Clase_2
LOADREF 2  ; MethodCallNode. Recuperamos la direccion del metodo 'potencia'. 
CALL  ; MethodCallNode. Llamamos al metodo 'potencia'. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'Clase'. 
.DATA
lString1_Clase_Clase: DW "Hola mundo", 0
.CODE
PUSH lString1_Clase_Clase  ; Apilamos el label del String '"Hola mundo"'. 
.CODE
LOAD 3  ; AssignNode. Apilamos THIS 
SWAP  ; AssignNode. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 7  ; AssignNode. El lado izquierdo es una variable de instancia de la clase 'Clase'. 
FMEM 2  ; Liberamos la memoria de las variables locales del metodo 'Clase' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'Clase'
L_MET_Clase_2_main_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'exec' DE LA CLASE 'Clase'
L_MET_Clase_2_exec_1: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 2  ; Reservamos memoria para las variables locales del metodo 'exec' 
.CODE
PUSH 0
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'exec'. 
.CODE
PUSH 0
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'exec'. 
.CODE
L_WHILE_2_exec_Clase: NOP
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'a'. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'x'. 
.CODE
LT
BF L_ENDWHILE_2_exec_Clase
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'y'. 
.CODE
STORE 0  ; AssignNode. El lado izquierdo es una variable local del metodo 'exec'. 
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'a'. 
.CODE
PUSH 1
.CODE
ADD
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'exec'. 
JUMP L_WHILE_2_exec_Clase
L_ENDWHILE_2_exec_Clase: NOP
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'b'. 
.CODE
LOAD 3  ; MethodCallNode. Apilamos el THIS para invocar al metodo 'potencia'. 
RMEM 1  ; MethodCallNode. Reservamos una locacion de memoria para el resultado del metodo 'potencia' de la clase 'Clase'. 
SWAP  ; MethodCallNode. Acomodamos el THIS haciendo un SWAP con RETVAL. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'x'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'y'. 
SWAP  ; MethodCallNode. Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
PUSH VT_Clase_2
LOADREF 2  ; MethodCallNode. Recuperamos la direccion del metodo 'potencia'. 
CALL  ; MethodCallNode. Llamamos al metodo 'potencia'. 
.CODE
GE
.CODE
BF L_ENDIF_3_exec_Clase
.DATA
lString4_exec_Clase: DW "Mayor que potencia", 0
.CODE
PUSH lString4_exec_Clase  ; Apilamos el label del String '"Mayor que potencia"'. 
.CODE
; Retorno de expresion del metodo 'exec' de la clase 'Clase'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'exec' de la clase 'Clase'. 
FMEM 2  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'exec' de la clase 'Clase'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'exec' de la clase 'Clase'. 
JUMP L_ENDELSE_3_exec_Clase
L_ENDIF_3_exec_Clase: NOP
.DATA
lString5_exec_Clase: DW "Menor que potencia", 0
.CODE
PUSH lString5_exec_Clase  ; Apilamos el label del String '"Menor que potencia"'. 
.CODE
; Retorno de expresion del metodo 'exec' de la clase 'Clase'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'exec' de la clase 'Clase'. 
FMEM 2  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'exec' de la clase 'Clase'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'exec' de la clase 'Clase'. 
L_ENDELSE_3_exec_Clase: NOP
.DATA
lString6_exec_Clase: DW "Un string", 0
.CODE
PUSH lString6_exec_Clase  ; Apilamos el label del String '"Un string"'. 
.CODE
; Retorno de expresion del metodo 'exec' de la clase 'Clase'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'exec' de la clase 'Clase'. 
FMEM 2  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'exec' de la clase 'Clase'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'exec' de la clase 'Clase'. 
FMEM 2  ; Liberamos la memoria de las variables locales del metodo 'exec' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'potencia' DE LA CLASE 'Clase'
L_MET_Clase_2_potencia_2: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 2  ; Reservamos memoria para las variables locales del metodo 'potencia' 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'y'. 
.CODE
PUSH 0
.CODE
EQ
.CODE
BF L_ENDIFTHEN_7_potencia_Clase
.CODE
PUSH 1
.CODE
; Retorno de expresion del metodo 'potencia' de la clase 'Clase'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'potencia' de la clase 'Clase'. 
FMEM 2  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'potencia' de la clase 'Clase'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'potencia' de la clase 'Clase'. 
L_ENDIFTHEN_7_potencia_Clase: NOP
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'x'. 
.CODE
PUSH 0
.CODE
EQ
.CODE
BF L_ENDIFTHEN_8_potencia_Clase
.CODE
PUSH 0
.CODE
; Retorno de expresion del metodo 'potencia' de la clase 'Clase'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'potencia' de la clase 'Clase'. 
FMEM 2  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'potencia' de la clase 'Clase'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'potencia' de la clase 'Clase'. 
L_ENDIFTHEN_8_potencia_Clase: NOP
.CODE
PUSH 1
.CODE
STORE -1  ; AssignNode. El lado izquierdo es una variable local del metodo 'potencia'. 
.CODE
LOAD 5  ; IdMethodCallNode. Cargamos el parametro 'x'. 
.CODE
; Retorno de expresion del metodo 'potencia' de la clase 'Clase'.
STORE 6  ; ReturnExpNode. Almacenamos el retorno del metodo 'potencia' de la clase 'Clase'. 
FMEM 2  ; ReturnExpNode. Liberamos el espacio usado por las variables locales del metodo 'potencia' de la clase 'Clase'. 
STOREFP  ; ReturnExpNode. Actualizamos el FP para que apunte al RA del llamador 
RET 3  ; ReturnExpNode. Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'potencia' de la clase 'Clase'. 
FMEM 2  ; Liberamos la memoria de las variables locales del metodo 'potencia' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 3  ; Retornamos de la unidad 
