.DATA
VT_Object_0: NOP
VT_System_1: DW L_MET_System_1_Ctor, L_MET_System_1_read, L_MET_System_1_printI, L_MET_System_1_printC, L_MET_System_1_printB, L_MET_System_1_printS, L_MET_System_1_println, L_MET_System_1_printBln, L_MET_System_1_printCln, L_MET_System_1_printIln, L_MET_System_1_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP
CALL
RMEM 1
PUSH L_MET_foo2_3_main_0
CALL
HALT
L_MET_System_1_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_1_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_1_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_1_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_1_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_1_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_1_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_1_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_1_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: NOP
LOADFP
LOADSP
STOREFP
LOADHL
DUP
PUSH 1
ADD
STORE 4
LOAD 3
ADD
STOREHL
STOREFP
RET 1
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_foo_2: NOP
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'foo' DE LA CLASE 'foo'
L_CTOR_foo_2_foo: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 7  ; Reservamos memoria para las variables locales del metodo 'foo' 
.CODE
LOAD 4  ; IdMethodCallNode. Cargamos el parametro 'i'. 
.CODE
LOAD -1  ; IdMethodCallNode. Cargamos la variable local 'j'. 
.CODE
ADD
.CODE
PUSH 8
.CODE
ADD
.CODE
LOAD 0  ; IdMethodCallNode. Cargamos la variable local 'a'. 
.CODE
SUB
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
PUSH 1  ; LiteralNode. Apilamos 'true'. 
.CODE
PUSH 0  ; LiteralNode. Apilamos 'false'. 
.CODE
OR
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
PUSH 0  ; LiteralNode. Apilamos 'null'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
LOAD -2  ; IdMethodCallNode. Cargamos la variable local 'Entero'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
LOAD -3  ; IdMethodCallNode. Cargamos la variable local 'Caracter'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
PUSH 1  ; LiteralNode. Apilamos 'true'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
PUSH 0  ; LiteralNode. Apilamos 'false'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
LOAD -4  ; IdMethodCallNode. Cargamos la variable local 'Cadena'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
LOAD -6  ; IdMethodCallNode. Cargamos la variable local 'Clase'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
LOAD -5  ; IdMethodCallNode. Cargamos la variable local 'Tipo'. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
LOAD 3  ; ThisNode. Apilamos THIS. 
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
PUSH 1  ; LiteralNode. Apilamos 'true'. 
.CODE
PUSH 0  ; LiteralNode. Apilamos 'false'. 
.CODE
AND
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
.CODE
PUSH 1  ; LiteralNode. Apilamos 'true'. 
.CODE
PUSH 0  ; LiteralNode. Apilamos 'false'. 
.CODE
PUSH 1  ; LiteralNode. Apilamos 'true'. 
.CODE
AND
.CODE
OR
POP  ; SimpleSentenceNode. Desapilamos el resultado de la expresion. 
FMEM 7  ; Liberamos la memoria de las variables locales del metodo 'foo' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.DATA
VT_foo2_3: DW L_MET_foo2_3_main_0
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'foo2' DE LA CLASE 'foo2'
L_CTOR_foo2_3_foo2: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'foo2'
L_MET_foo2_3_main_0: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
