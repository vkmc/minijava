.DATA
VT_Object: NOP
VT_System: DW L_MET_System_Ctor, L_MET_System_read, L_MET_System_printI, L_MET_System_printC, L_MET_System_printB, L_MET_System_printS, L_MET_System_println, L_MET_System_printBln, L_MET_System_printCln, L_MET_System_printIln, L_MET_System_printSln 
.CODE
PUSH L_SIMPLE_INIT_HEAP  ; Inicializamos el heap 
CALL
RMEM 1  ; Reservamos memoria para el this 
PUSH L_MET_Z_main  ; Apilamos el label del main de la Clase Principal del Programa 
CALL
HALT
L_MET_System_Ctor: NOP  ; Constructor de system 
LOADFP
LOADSP
STOREFP
STOREFP
RET 1
L_MET_System_read: NOP
LOADFP
LOADSP
STOREFP
READ
STORE 4
STOREFP
RET 1
L_MET_System_printI: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
STOREFP
RET 2
L_MET_System_printC: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
STOREFP
RET 2
L_MET_System_printB: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
STOREFP
RET 2
L_MET_System_printS: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
STOREFP
RET 2
L_MET_System_println: NOP
LOADFP
LOADSP
STOREFP
PRNLN
STOREFP
RET 1
L_MET_System_printBln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
BPRINT
PRNLN
STOREFP
RET 2
L_MET_System_printCln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
CPRINT
PRNLN
STOREFP
RET 2
L_MET_System_printIln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
IPRINT
PRNLN
STOREFP
RET 2
L_MET_System_printSln: NOP
LOADFP
LOADSP
STOREFP
LOAD 4
SPRINT
PRNLN
STOREFP
RET 2
L_SIMPLE_MALLOC: LOADFP  ; Inicializacion unidad 
LOADSP
STOREFP  ; Finaliza inicializacion del RA 
LOADHL  ; hl 
DUP  ; hl 
PUSH 1  ; 1 
ADD  ; hl+1 
STORE 4  ; Guarda resultado (puntero a la base del bloque) 
LOAD 3  ; Carga cantidad de celdas a alojar (parametro)  
ADD
STOREHL  ; Mueve el heap limit (hl) 
STOREFP
RET 1  ; Retorna eliminando el parametro 
L_SIMPLE_INIT_HEAP: RET 0  ; Inicializacion simplificada del .heap 
.DATA
VT_A: DW L_MET_A_m
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'A' DE LA CLASE 'A'
L_CTOR_A_A: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString1_A_A: DW "A(int)", 0
.CODE
PUSH lString1_A_A  ; Apilamos el label del String '"A(int)"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
LOAD 4  ; Cargamos el parametro '_i'. 
.CODE
LOAD 3  ; Asignacion. Apilamos THIS 
SWAP  ; Asignacion. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 1  ; Asignacion. El lado izquierdo es una variable de instancia de la clase 'A'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'm' DE LA CLASE 'A'
L_MET_A_m: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString2_m_A: DW "A.m()", 0
.CODE
PUSH lString2_m_A  ; Apilamos el label del String '"A.m()"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; Llamada al constructor de la clase 'B'. Se reserva memoria para la referencia al nuevo CIR 
PUSH 2  ; Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; Apilamos la direccion de la rutina para reservar memoria en el heap 
CALL  ; Invocamos a la rutina en el tope de la pila (lsimple_malloc) 
DUP  ; Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_B  ; Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR 
STOREREF 0  ; Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT 
DUP  ; Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila 
.CODE
LOAD 3  ; Apilamos el THIS para poder acceder al CIR. 
LOADREF 1  ; Cargamos la variable de instancia 'i'. 
.CODE
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_B_B  ; Apilamos la direccion del constructor de la clase 'B'. 
CALL  ; Invocamos la rutina del constructor de la clase 'B' 
.CODE
; Retorno de expresion del metodo 'm' de la clase 'A'
STORE 4  ; Almacenamos el retorno del metodo 'm' de la clase 'A'. 
STOREFP  ; Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'm' de la clase 'A'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.DATA
VT_B: DW L_MET_B_m
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'B' DE LA CLASE 'B'
L_CTOR_B_B: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString3_B_B: DW "B(int)", 0
.CODE
PUSH lString3_B_B  ; Apilamos el label del String '"B(int)"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
LOAD 4  ; Cargamos el parametro '_i'. 
.CODE
LOAD 3  ; Asignacion. Apilamos THIS 
SWAP  ; Asignacion. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 1  ; Asignacion. El lado izquierdo es una variable de instancia de la clase 'B'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'm' DE LA CLASE 'B'
L_MET_B_m: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString4_m_B: DW "B.m()", 0
.CODE
PUSH lString4_m_B  ; Apilamos el label del String '"B.m()"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; Llamada al constructor de la clase 'C'. Se reserva memoria para la referencia al nuevo CIR 
PUSH 2  ; Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; Apilamos la direccion de la rutina para reservar memoria en el heap 
CALL  ; Invocamos a la rutina en el tope de la pila (lsimple_malloc) 
DUP  ; Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_C  ; Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR 
STOREREF 0  ; Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT 
DUP  ; Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila 
.CODE
LOAD 3  ; Apilamos el THIS para poder acceder al CIR. 
LOADREF 1  ; Cargamos la variable de instancia 'i'. 
.CODE
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_C_C  ; Apilamos la direccion del constructor de la clase 'C'. 
CALL  ; Invocamos la rutina del constructor de la clase 'C' 
.CODE
; Retorno de expresion del metodo 'm' de la clase 'B'
STORE 4  ; Almacenamos el retorno del metodo 'm' de la clase 'B'. 
STOREFP  ; Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'm' de la clase 'B'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.DATA
VT_C: DW L_MET_C_m
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'C' DE LA CLASE 'C'
L_CTOR_C_C: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString5_C_C: DW "C(int)", 0
.CODE
PUSH lString5_C_C  ; Apilamos el label del String '"C(int)"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
LOAD 4  ; Cargamos el parametro '_i'. 
.CODE
LOAD 3  ; Asignacion. Apilamos THIS 
SWAP  ; Asignacion. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 1  ; Asignacion. El lado izquierdo es una variable de instancia de la clase 'C'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'm' DE LA CLASE 'C'
L_MET_C_m: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString6_m_C: DW "C.m()", 0
.CODE
PUSH lString6_m_C  ; Apilamos el label del String '"C.m()"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; Llamada al constructor de la clase 'D'. Se reserva memoria para la referencia al nuevo CIR 
PUSH 2  ; Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; Apilamos la direccion de la rutina para reservar memoria en el heap 
CALL  ; Invocamos a la rutina en el tope de la pila (lsimple_malloc) 
DUP  ; Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_D  ; Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR 
STOREREF 0  ; Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT 
DUP  ; Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila 
.CODE
LOAD 3  ; Apilamos el THIS para poder acceder al CIR. 
LOADREF 1  ; Cargamos la variable de instancia 'i'. 
.CODE
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_D_D  ; Apilamos la direccion del constructor de la clase 'D'. 
CALL  ; Invocamos la rutina del constructor de la clase 'D' 
.CODE
; Retorno de expresion del metodo 'm' de la clase 'C'
STORE 4  ; Almacenamos el retorno del metodo 'm' de la clase 'C'. 
STOREFP  ; Actualizamos el FP para que apunte al RA del llamador 
RET 1  ; Retornamos de la unidad liberando el espacio que ocupaban los parametros y el THIS del metodo 'm' de la clase 'C'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.DATA
VT_D: DW L_MET_D_m
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'D' DE LA CLASE 'D'
L_CTOR_D_D: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString7_D_D: DW "D(int)", 0
.CODE
PUSH lString7_D_D  ; Apilamos el label del String '"D(int)"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
LOAD 4  ; Cargamos el parametro '_i'. 
.CODE
LOAD 3  ; Asignacion. Apilamos THIS 
SWAP  ; Asignacion. Invertimos el orden del tope de la pila. STOREREF usa los parametros en orden inverso (CIR, valor). 
STOREREF 1  ; Asignacion. El lado izquierdo es una variable de instancia de la clase 'D'. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 2  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'm' DE LA CLASE 'D'
L_MET_D_m: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString8_m_D: DW "D.m()", 0
.CODE
PUSH lString8_m_D  ; Apilamos el label del String '"D.m()"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.CODE
LOAD 3  ; Apilamos el THIS para poder acceder al CIR. 
LOADREF 1  ; Cargamos la variable de instancia 'i'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printIln
CALL  ; Llamada al metodo 'printIln' de System. 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.DATA
VT_Z: DW L_MET_Z_main
.CODE
; INICIALIZAMOS EL CI DEL CONSTRUCTOR 'Z' DE LA CLASE 'Z'
L_CTOR_Z_Z: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
.CODE
; INICIALIZAMOS EL CI DEL METODO 'main' DE LA CLASE 'Z'
L_MET_Z_main: LOADFP  ; Guardamos el ED al RA llamador 
LOADSP  ; Apilamos la locación donde empieza el RA de la unidad 
STOREFP  ; Actualizamos el FP con el valor del tope de la pila 
RMEM 4  ; Reservamos memoria para las variables locales del metodo 'main' 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString9_main_Z: DW "Secuenciales", 0
.CODE
PUSH lString9_main_Z  ; Apilamos el label del String '"Secuenciales"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; Llamada al constructor de la clase 'A'. Se reserva memoria para la referencia al nuevo CIR 
PUSH 2  ; Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; Apilamos la direccion de la rutina para reservar memoria en el heap 
CALL  ; Invocamos a la rutina en el tope de la pila (lsimple_malloc) 
DUP  ; Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_A  ; Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR 
STOREREF 0  ; Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT 
DUP  ; Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila 
.CODE
PUSH 12345
.CODE
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_A_A  ; Apilamos la direccion del constructor de la clase 'A'. 
CALL  ; Invocamos la rutina del constructor de la clase 'A' 
.CODE
STORE 0  ; Asignacion. El lado izquierdo es una variable local del metodo 'main' 
.CODE
LOAD 0  ; Cargamos la variable local 'a'. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el resultado del metodo 'm' de la clase 'Z' 
SWAP  ; Acomodamos el THIS haciendo un SWAP con RETVAL 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
.CODE
STORE -1  ; Asignacion. El lado izquierdo es una variable local del metodo 'main' 
.CODE
LOAD -1  ; Cargamos la variable local 'b'. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el resultado del metodo 'm' de la clase 'Z' 
SWAP  ; Acomodamos el THIS haciendo un SWAP con RETVAL 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
.CODE
STORE -2  ; Asignacion. El lado izquierdo es una variable local del metodo 'main' 
.CODE
LOAD -2  ; Cargamos la variable local 'c'. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el resultado del metodo 'm' de la clase 'Z' 
SWAP  ; Acomodamos el THIS haciendo un SWAP con RETVAL 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
.CODE
STORE -3  ; Asignacion. El lado izquierdo es una variable local del metodo 'main' 
.CODE
LOAD -3  ; Cargamos la variable local 'd'. 
.CODE
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.CODE
PUSH L_MET_System_println
CALL  ; Llamada al metodo 'println' de System. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el this ficticio 
.CODE
.DATA
lString10_main_Z: DW "Anidadas", 0
.CODE
PUSH lString10_main_Z  ; Apilamos el label del String '"Anidadas"'. 
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_MET_System_printSln
CALL  ; Llamada al metodo 'printSln' de System. 
.CODE
RMEM 1  ; Llamada al constructor de la clase 'A'. Se reserva memoria para la referencia al nuevo CIR 
PUSH 2  ; Apilamos la cantidad de variables de instancia del nuevo CIR mas el espacio para la VT. 
PUSH L_SIMPLE_MALLOC  ; Apilamos la direccion de la rutina para reservar memoria en el heap 
CALL  ; Invocamos a la rutina en el tope de la pila (lsimple_malloc) 
DUP  ; Duplicamos la referencia al nuevo CIR para el STOREREF. 
PUSH VT_A  ; Apilamos la direccion del comienzo de la VT del id en la creacion de un CIR 
STOREREF 0  ; Guardamos las referencia a la VT en el CIR creado. El offset 0 en el CIR se corresponde a la VT 
DUP  ; Duplicamos el THIS para el RA del constructor quedando, al finalizar la ejecucion, en el tope de la pila 
.CODE
PUSH 54321
.CODE
SWAP  ; Acomodamos el THIS cada vez que generamos el codigo para un parametro. 
.CODE
PUSH L_CTOR_A_A  ; Apilamos la direccion del constructor de la clase 'A'. 
CALL  ; Invocamos la rutina del constructor de la clase 'A' 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el resultado del metodo 'm' de la clase 'Z' 
SWAP  ; Acomodamos el THIS haciendo un SWAP con RETVAL 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el resultado del metodo 'm' de la clase 'Z' 
SWAP  ; Acomodamos el THIS haciendo un SWAP con RETVAL 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
.CODE
RMEM 1  ; Reservamos una locacion de memoria para el resultado del metodo 'm' de la clase 'Z' 
SWAP  ; Acomodamos el THIS haciendo un SWAP con RETVAL 
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
.CODE
.CODE
DUP  ; CallNode. Duplicamos la referencia al CIR para utilizarla en el LOADREF al asociar la VT para invocar al metodo 'm'. 
LOADREF 0  ; CallNode. El offset de la VT en el CIR es siempre 0. Accedemos a la VT. 
LOADREF 0  ; CallNode. Recuperamos la direccion del metodo 'm'. 
CALL  ; CallNode. Llamamos al metodo 'm'. 
FMEM 4  ; Liberamos la memoria de las variables locales del metodo 'main' 
STOREFP ; Se actualiza el FP para que apunte al RA del llamador
RET 1  ; Retornamos de la unidad 
